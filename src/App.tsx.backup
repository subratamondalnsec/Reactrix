import { useState } from 'react'
import './App.css'
import InputField from './components/InputField'
import DataTable from './components/DataTable'

// Sample data for the demo
type User = {
  id: number
  name: string
  email: string
  age: number
  role: string
  status: "active" | "inactive"
}

const sampleUsers: User[] = [
  { id: 1, name: "Alice Johnson", email: "alice@example.com", age: 28, role: "Designer", status: "active" },
  { id: 2, name: "Bob Smith", email: "bob@example.com", age: 32, role: "Developer", status: "active" },
  { id: 3, name: "Carol Davis", email: "carol@example.com", age: 26, role: "Manager", status: "inactive" },
  { id: 4, name: "David Wilson", email: "david@example.com", age: 35, role: "Developer", status: "active" },
  { id: 5, name: "Eva Brown", email: "eva@example.com", age: 29, role: "Designer", status: "active" },
]

const userColumns = [
  { 
    key: "name", 
    title: "Name", 
    dataIndex: "name" as keyof User, 
    sortable: true,
    render: (value: string, record: User) => (
      <div className="flex items-center space-x-3">
        <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white text-sm font-semibold">
          {value.split(' ').map(n => n[0]).join('')}
        </div>
        <div>
          <div className="font-medium">{value}</div>
          <div className="text-xs text-gray-500">{record.email}</div>
        </div>
      </div>
    )
  },
  { key: "age", title: "Age", dataIndex: "age" as keyof User, sortable: true, align: "center" as const },
  { key: "role", title: "Role", dataIndex: "role" as keyof User, sortable: true },
  { 
    key: "status", 
    title: "Status", 
    dataIndex: "status" as keyof User, 
    sortable: true,
    align: "center" as const,
    render: (value: "active" | "inactive") => (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
        value === "active" 
          ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" 
          : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
      }`}>
        {value.charAt(0).toUpperCase() + value.slice(1)}
      </span>
    )
  },
]

function App() {
  // Theme state
  const [isDarkMode, setIsDarkMode] = useState(false)
  
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    search: "",
  })
  
  // Separate state for sizes demo
  const [sizesDemoData, setSizesDemoData] = useState({
    sm: "",
    md: "",
    lg: "",
  })
  
  const [selectedUsers, setSelectedUsers] = useState<User[]>([])
  const [filteredUsers, setFilteredUsers] = useState(sampleUsers)
  const [isResetting, setIsResetting] = useState(false)

  // Toggle theme function
  const toggleTheme = () => {
    setIsDarkMode(prev => !prev)
  }

  // Reset all input fields function
  const resetAllInputs = () => {
    setIsResetting(true)
    setFormData({
      name: "",
      email: "",
      password: "",
      search: "",
    })
    setSizesDemoData({
      sm: "",
      md: "",
      lg: "",
    })
    // Also reset the filtered users when search is cleared
    setFilteredUsers(sampleUsers)
    
    // Reset the visual feedback after a short delay
    setTimeout(() => {
      setIsResetting(false)
    }, 1000)
  }

  const handleSearch = (searchTerm: string) => {
    setFormData(prev => ({ ...prev, search: searchTerm }))
    
    if (!searchTerm.trim()) {
      setFilteredUsers(sampleUsers)
    } else {
      const filtered = sampleUsers.filter(user => 
        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.role.toLowerCase().includes(searchTerm.toLowerCase())
      )
      setFilteredUsers(filtered)
    }
  }

  const SearchIcon = () => (
    <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
  )

  const EmailIcon = () => (
    <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
    </svg>
  )

  const UserIcon = () => (
    <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
    </svg>
  )

  return (
    <div className={`min-h-screen py-8 ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-black'}`}>
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Theme Toggle Button */}
        <div className="flex justify-end mb-6">
          <button
            onClick={toggleTheme}
            aria-label="Toggle theme"
            className={`p-3 rounded-lg transition-all duration-200 border-2 ${
              isDarkMode 
                ? 'bg-gray-800 hover:bg-gray-700 border-gray-600 text-white' 
                : 'bg-gray-100 hover:bg-gray-200 border-gray-300 text-black'
            }`}
          >
            {isDarkMode ? (
              // Sun icon for light mode
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
            ) : (
              // Moon icon for dark mode
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
              </svg>
            )}
          </button>
        </div>

        {/* Header */}
        <div className="text-center mb-12">
          <h1 className={`text-4xl font-bold mb-4 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
            Reactrix Component Library
          </h1>
          <p className={`text-xl ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
            Modern React components built with TypeScript and TailwindCSS
          </p>
        </div>

        {/* InputField Demo */}
        <div className="mb-16">
          <div className={`rounded-xl shadow-lg p-8 mb-8 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
            <h2 className={`text-2xl font-bold mb-6 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
              InputField Component Demo
            </h2>
            
            {/* All Sizes Demo */}
            <div className="mb-12">
              <h3 className={`text-lg font-semibold mb-6 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                âœ… All Sizes Demo - Small, Medium, Large with Clear Buttons
              </h3>
              <div className="space-y-6 max-w-md">
                <InputField
                  label="Small Size (sm)"
                  placeholder="Small input..."
                  size="sm"
                  value={sizesDemoData.sm}
                  onChange={(e) => setSizesDemoData(prev => ({ ...prev, sm: e.target.value }))}
                  showClearButton
                  onClear={() => setSizesDemoData(prev => ({ ...prev, sm: "" }))}
                  helperText="Small size input field (h-9, text-sm)"
                  isDarkMode={isDarkMode}
                />
                <InputField
                  label="Medium Size (md) - Default"
                  placeholder="Medium input..."
                  size="md"
                  value={sizesDemoData.md}
                  onChange={(e) => setSizesDemoData(prev => ({ ...prev, md: e.target.value }))}
                  showClearButton
                  onClear={() => setSizesDemoData(prev => ({ ...prev, md: "" }))}
                  helperText="Medium size input field (h-10, text-base) - Default"
                  isDarkMode={isDarkMode}
                />
                <InputField
                  label="Large Size (lg)"
                  placeholder="Large input..."
                  size="lg"
                  value={sizesDemoData.lg}
                  onChange={(e) => setSizesDemoData(prev => ({ ...prev, lg: e.target.value }))}
                  showClearButton
                  onClear={() => setSizesDemoData(prev => ({ ...prev, lg: "" }))}
                  helperText="Large size input field (h-12, text-lg)"
                  isDarkMode={isDarkMode}
                />
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-8">
              {/* Form Examples */}
              <div className="space-y-6">
                <h3 className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                  Form Examples
                </h3>
                
                <InputField
                  label="Full Name"
                  placeholder="Enter your full name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  icon={<UserIcon />}
                  iconPosition="left"
                  showClearButton
                  onClear={() => setFormData(prev => ({ ...prev, name: "" }))}
                  helperText="This will be displayed on your profile"
                  isDarkMode={isDarkMode}
                />
                
                <InputField
                  label="Email Address"
                  placeholder="your@email.com"
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                  icon={<EmailIcon />}
                  iconPosition="left"
                  invalid={formData.email.length > 0 && !formData.email.includes('@')}
                  errorMessage={formData.email.length > 0 && !formData.email.includes('@') ? "Please enter a valid email address" : undefined}
                  isDarkMode={isDarkMode}
                />
                
                <InputField
                  label="Password"
                  placeholder="Enter your password"
                  type="password"
                  value={formData.password}
                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
                  helperText="Must be at least 8 characters long"
                  isDarkMode={isDarkMode}
                />
              </div>

              {/* Variant Examples */}
              <div className="space-y-6">
                <h3 className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                  Variants & States
                </h3>
                
                <InputField
                  label="Outlined (Default)"
                  placeholder="Default outlined input"
                  variant="outlined"
                  isDarkMode={isDarkMode}/>
                
                <InputField
                  label="Filled Variant"
                  placeholder="Filled background input"
                  variant="filled"
                  isDarkMode={isDarkMode}/>
                
                <InputField
                  label="Ghost Variant"
                  placeholder="Minimal ghost input"
                  variant="ghost"
                  isDarkMode={isDarkMode}/>
                
                <InputField
                  label="Disabled State"
                  placeholder="This input is disabled"
                  disabled
                  value="Cannot edit this"
                  isDarkMode={isDarkMode}/>
                
                <InputField
                  label="Loading State"
                  placeholder="Processing..."
                  loading
                  isDarkMode={isDarkMode}/>
              </div>
            </div>

            {/* Global Reset Button */}
            <div className="mt-8 flex justify-center">
              <button
                onClick={resetAllInputs}
                disabled={isResetting}
                aria-label="Reset all inputs"
                className={`
                  px-6 py-3 rounded-lg font-medium text-sm transition-all duration-200
                  border-2 shadow-sm hover:shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2
                  ${isResetting
                    ? isDarkMode 
                      ? 'bg-green-600 border-green-600 text-white cursor-not-allowed'
                      : 'bg-green-500 border-green-500 text-white cursor-not-allowed'
                    : isDarkMode 
                      ? 'bg-red-600 hover:bg-red-700 border-red-600 text-white focus:ring-red-500' 
                      : 'bg-red-500 hover:bg-red-600 border-red-500 text-white focus:ring-red-500'
                  }
                  ${isDarkMode ? 'focus:ring-offset-gray-800' : 'focus:ring-offset-white'}
                  ${!isResetting ? 'active:scale-95 transform' : ''}
                `}
              >
                {isResetting ? (
                  <>
                    <svg 
                      className="w-4 h-4 mr-2 inline-block animate-spin" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                      aria-hidden="true"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Reset Complete ✓
                  </>
                ) : (
                  <>
                    <svg 
                      className="w-4 h-4 mr-2 inline-block" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                      aria-hidden="true"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Reset All Inputs
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* DataTable Demo */}
        <div className={`rounded-xl shadow-lg p-8 ${isDarkMode ? 'bg-gray-800' : 'bg-white'}`}>
          <h2 className={`text-2xl font-bold mb-6 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
            DataTable Component Demo
          </h2>
          
          {/* Search */}
          <div className="mb-6">
            <InputField
              label="Search Users"
              placeholder="Search by name, email, or role..."
              value={formData.search}
              onChange={(e) => handleSearch(e.target.value)}
              icon={<SearchIcon />}
              iconPosition="left"
              showClearButton
              onClear={() => handleSearch("")}
              helperText={`Showing ${filteredUsers.length} of ${sampleUsers.length} users`}
              isDarkMode={isDarkMode}
            />
          </div>

          {/* Selection Info */}
          {selectedUsers.length > 0 && (
            <div className={`mb-4 p-4 rounded-lg ${isDarkMode ? 'bg-blue-900/20' : 'bg-blue-50'}`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className={`text-sm font-medium ${isDarkMode ? 'text-blue-100' : 'text-blue-900'}`}>
                    {selectedUsers.length} user{selectedUsers.length !== 1 ? 's' : ''} selected
                  </p>
                  <p className={`text-xs mt-1 ${isDarkMode ? 'text-blue-300' : 'text-blue-700'}`}>
                    {selectedUsers.map(user => user.name).join(', ')}
                  </p>
                </div>
                <button
                  onClick={() => setSelectedUsers([])}
                  className={`text-sm font-medium ${
                    isDarkMode 
                      ? 'text-blue-400 hover:text-blue-300' 
                      : 'text-blue-600 hover:text-blue-800'
                  }`}
                >
                  Clear Selection
                </button>
              </div>
            </div>
          )}
          
          {/* Data Table */}
          <DataTable
            data={filteredUsers}
            columns={userColumns}
            selectable="multiple"
            onRowSelect={(selected) => setSelectedUsers(selected)}
            bordered
            striped
            emptyText="No users match your search criteria. Try different keywords."
            isDarkMode={isDarkMode}
          />
          
          {/* Table Features Info */}
          <div className="mt-6 grid sm:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600 dark:text-gray-400">
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span>Sortable columns</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
              <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>Multi-row selection</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
              <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>Custom cell rendering</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
              <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>Responsive design</span>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className={`text-center mt-12 pt-8 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
          <p className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>
            Built with React, TypeScript, TailwindCSS, and Storybook
          </p>
        </div>
      </div>
    </div>
  )
}

export default App

