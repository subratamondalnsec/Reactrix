import React, { useMemo, useState } from "react"

export interface Column<T> {
  key: string
  title: string
  dataIndex: keyof T
  sortable?: boolean
  width?: string | number
  align?: "left" | "center" | "right"
  render?: (value: any, record: T, index: number) => React.ReactNode
}

export interface DataTableProps<T> {
  data: T[]
  columns: Column<T>[]
  loading?: boolean
  selectable?: boolean | "single" | "multiple"
  onRowSelect?: (selectedRows: T[], selectedRow?: T) => void
  emptyText?: string
  className?: string
  rowKey?: keyof T | ((record: T) => string | number)
  onRowClick?: (record: T, index: number) => void
  size?: "sm" | "md" | "lg"
  bordered?: boolean
  striped?: boolean
  isDarkMode?: boolean
}

type SortState<T> = {
  column?: Column<T>
  direction: "asc" | "desc"
}

// Helper icons
const SortIcon = ({ direction, active }: { direction?: "asc" | "desc"; active?: boolean }) => (
  <svg className={`w-4 h-4 ml-1 ${active ? "text-blue-600" : "text-gray-400"}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    {direction === "asc" ? (
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
    ) : direction === "desc" ? (
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
    ) : (
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
    )}
  </svg>
)

const LoadingSpinner = () => (
  <svg className="animate-spin h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24">
    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
  </svg>
)

const EmptyIcon = () => (
  <svg className="w-12 h-12 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
)

function cmp(a: unknown, b: unknown) {
  if (a == null && b == null) return 0
  if (a == null) return -1
  if (b == null) return 1
  const an = Number(a), bn = Number(b)
  if (!Number.isNaN(an) && !Number.isNaN(bn)) return an - bn
  return String(a).localeCompare(String(b))
}

const sizeClasses = {
  sm: { table: "text-xs", cell: "p-2", header: "p-2" },
  md: { table: "text-sm", cell: "p-3", header: "p-3" },
  lg: { table: "text-base", cell: "p-4", header: "p-4" },
}

export function DataTable<T extends Record<string, any>>({
  data,
  columns,
  loading = false,
  selectable = false,
  onRowSelect,
  emptyText = "No data available",
  className,
  rowKey,
  onRowClick,
  size = "md",
  bordered = false,
  striped = false,
  isDarkMode = false,
}: DataTableProps<T>) {
  const [sort, setSort] = useState<SortState<T>>({ direction: "asc" })
  const [selected, setSelected] = useState<Set<string | number>>(new Set())

  const getRowKey = (record: T, index: number): string | number => {
    if (typeof rowKey === "function") {
      return rowKey(record)
    }
    if (rowKey && record[rowKey] != null) {
      return record[rowKey] as string | number
    }
    return index
  }

  const sorted = useMemo(() => {
    if (!sort.column) return data
    const col = sort.column.dataIndex
    const dir = sort.direction === "asc" ? 1 : -1
    return [...data].sort((r1, r2) => dir * cmp(r1[col], r2[col]))
  }, [data, sort])

  function toggleSort(col: Column<T>) {
    if (!col.sortable) return
    setSort(prev => {
      if (prev.column?.key === col.key) {
        return { column: col, direction: prev.direction === "asc" ? "desc" : "asc" }
      }
      return { column: col, direction: "asc" }
    })
  }

  function toggleRow(key: string | number, record: T) {
    if (!selectable) return
    
    if (selectable === "single") {
      const newSelected = selected.has(key) ? new Set<string | number>() : new Set<string | number>([key])
      setSelected(newSelected)
      const selectedRecords = newSelected.size > 0 ? [record] : []
      onRowSelect?.(selectedRecords, selectedRecords[0])
    } else {
      const next = new Set(selected)
      if (next.has(key)) {
        next.delete(key)
      } else {
        next.add(key)
      }
      setSelected(next)
      const selectedRecords = sorted.filter((_, idx) => next.has(getRowKey(sorted[idx], idx)))
      onRowSelect?.(selectedRecords)
    }
  }

  const allChecked = selectable && selectable !== "single" && sorted.length > 0 && 
    sorted.every((record, idx) => selected.has(getRowKey(record, idx)))
  const someChecked = selected.size > 0 && !allChecked

  function toggleAll() {
    if (!selectable || selectable === "single") return
    
    if (allChecked) {
      setSelected(new Set())
      onRowSelect?.([])
    } else {
      const allKeys = new Set(sorted.map((record, idx) => getRowKey(record, idx)))
      setSelected(allKeys)
      onRowSelect?.(sorted)
    }
  }

  const sizeConfig = sizeClasses[size]

  return (
    <div className={`w-full ${bordered ? `border ${isDarkMode ? 'border-gray-700' : 'border-gray-200/60'} shadow-sm` : "shadow-sm"} rounded-lg overflow-hidden ${isDarkMode ? 'bg-gray-900/70' : 'bg-white/70'} backdrop-blur-sm ${className ?? ""}`}>
      {loading && (
        <div className={`flex items-center justify-center p-8 ${isDarkMode ? 'bg-gray-900' : 'bg-white/80'}`}>
          <LoadingSpinner />
          <span className={`ml-3 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Loading...</span>
        </div>
      )}

      {!loading && sorted.length === 0 && (
        <div className={`flex flex-col items-center justify-center p-12 ${isDarkMode ? 'bg-gray-900' : 'bg-white/80'} text-center`}>
          <EmptyIcon />
          <p className={`mt-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'} text-lg font-medium`}>No Data</p>
          <p className={`mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'} text-sm`}>{emptyText}</p>
        </div>
      )}

      {!loading && sorted.length > 0 && (
        <div className="overflow-x-auto">
          <table className={`w-full ${sizeConfig.table} ${bordered ? "" : "border-collapse"}`}>
            <thead className={`${isDarkMode ? 'bg-gray-800' : 'bg-gray-100/80'} border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200/60'}`}>
              <tr>
                {selectable && selectable !== "single" && (
                  <th className={`${sizeConfig.header} w-12 text-left`}>
                    <input
                      type="checkbox"
                      checked={allChecked}
                      ref={(el) => {
                        if (el) el.indeterminate = someChecked
                      }}
                      onChange={toggleAll}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      aria-label="Select all rows"
                    />
                  </th>
                )}
                {selectable === "single" && (
                  <th className={`${sizeConfig.header} w-12 text-left`}>
                    <span className="sr-only">Select</span>
                  </th>
                )}
                {columns.map(col => {
                  const isSorted = sort.column?.key === col.key
                  const alignClass = col.align === "center" ? "text-center" : col.align === "right" ? "text-right" : "text-left"
                  
                  return (
                    <th 
                      key={col.key} 
                      className={`${sizeConfig.header} font-semibold ${isDarkMode ? 'text-gray-100' : 'text-gray-900'} ${alignClass}`}
                      style={{ width: col.width }}
                    >
                      {col.sortable ? (
                        <button
                          type="button"
                          onClick={() => toggleSort(col)}
                          className={`inline-flex items-center ${isDarkMode ? 'hover:text-blue-400' : 'hover:text-blue-600'} transition-colors ${alignClass === "text-right" ? "flex-row-reverse" : ""}`}
                          aria-label={`Sort by ${col.title}`}
                        >
                          <span>{col.title}</span>
                          <SortIcon direction={isSorted ? sort.direction : undefined} active={isSorted} />
                        </button>
                      ) : (
                        col.title
                      )}
                    </th>
                  )
                })}
              </tr>
            </thead>
            <tbody className={`${isDarkMode ? 'bg-gray-900' : 'bg-white/70'} divide-y ${isDarkMode ? 'divide-gray-700' : 'divide-gray-200/60'}`}>
              {sorted.map((row, idx) => {
                const key = getRowKey(row, idx)
                const isSelected = selected.has(key)
                
                return (
                  <tr 
                    key={key} 
                    className={`
                      ${striped && idx % 2 === 1 ? (isDarkMode ? 'bg-gray-800/50' : 'bg-gray-50/60') : ""}
                      ${onRowClick ? `cursor-pointer ${isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100/60'}` : (isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100/60')}
                      ${isSelected ? (isDarkMode ? 'bg-blue-900/20' : 'bg-blue-50/80') : ""}
                      transition-colors
                    `}
                    onClick={() => onRowClick?.(row, idx)}
                  >
                    {selectable && (
                      <td className={sizeConfig.cell}>
                        <input
                          type={selectable === "single" ? "radio" : "checkbox"}
                          name={selectable === "single" ? "table-select" : undefined}
                          checked={isSelected}
                          onChange={(e) => {
                            e.stopPropagation()
                            toggleRow(key, row)
                          }}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          aria-label={`Select row ${idx + 1}`}
                        />
                      </td>
                    )}
                    {columns.map(col => {
                      const value = row[col.dataIndex]
                      const alignClass = col.align === "center" ? "text-center" : col.align === "right" ? "text-right" : "text-left"
                      
                      return (
                        <td 
                          key={col.key} 
                          className={`${sizeConfig.cell} text-gray-900 dark:text-gray-100 ${alignClass}`}
                        >
                          {col.render ? col.render(value, row, idx) : String(value ?? "")}
                        </td>
                      )
                    })}
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  )
}

export default DataTable
